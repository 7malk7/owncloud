<?php

/**
 * ownCloud - hookextract
 *
 * This file is licensed under the Affero General Public License version 3 or
 * later. See the COPYING file.
 *
 * @author Alexy Yurchanka <maly@abat.de>
 * @author Aleh Kalenchanka <malk@abat.de>
 * @copyright Alexy Yurchanka, Aleh Kalenchanka 2016
 */

namespace OCA\HookExtract\Controller;

use OCP\IRequest;
use OCP\AppFramework\Http\TemplateResponse;
use OCP\AppFramework\Http\DataResponse;
use OCP\AppFramework\Http\DownloadResponse;
use OCP\AppFramework\Controller;
use OCA\Deducttodb\Db\EntryMapper;
use OCA\Deducttodb\Db\entryArchiveMapper;
use OCA\Deducttodb\Db\paramsMapper;
use OCA\Deducttodb\Db\FormsMapper;
use OCA\HookExtract\AppInfo\Hookextract;
use OCA\DeductToDB\Storage\StorageException;
use OCA\HookExtract\Http\FileResponse;

require_once "phpexcel/Classes/PHPExcel.php";

class PageController extends Controller {

    private $userId;
    private $connection;
    private $db;
    private $app;
    private $container;

    public function __construct($AppName, IRequest $request, $UserId) {
        parent::__construct($AppName, $request);
        $this->userId = $UserId;

        $this->app = new Hookextract($_REQUEST);
        $this->container = $this->app->getContainer();


        $this->connection = $this->container->getServer()->getDatabaseConnection();
        $this->db = $this->container->getServer()->getDb();
    }

    /**
     * CAUTION: the @Stuff turns off security checks; for this page no admin is
     *          required and no CSRF check. If you don't know what CSRF is, read
     *          it up in the docs or you might create a security hole. This is
     *          basically the only required method to add this exemption, don't
     *          add it to any other method if you don't exactly know what it does
     *
     * @NoAdminRequired
     * @NoCSRFRequired
     */
    public function index() {

        $imgurl = \OC::$server->getURLGenerator()->imagePath('hookextract', 'image002.jpg');
        //$params = ['user' => $this->userId, 'imgurl' => $imgurl];
        
        $iniMapper = new \OCA\DeductToDB\Db\paramsMapper($this->db);        
         
        $recurr = $iniMapper->findByName("conf1_recurrency");
        if($recurr){
        	$params = [
        			everyday => $recurr,
        			begin    => $iniMapper->findByName("conf1_begin"),
        			begin_selection => $iniMapper->findByName("conf1_begin_selection"),
        			end_selection => $iniMapper->findByName("conf1_end_selection"),
        			plushour => $iniMapper->findByName("conf1_plus1h"),
        			week1    => $iniMapper->findByName("conf1_week1"),
        			week2    => $iniMapper->findByName("conf1_week2"),
        			week3    => $iniMapper->findByName("conf1_week3"),
        			week4    => $iniMapper->findByName("conf1_week4"),
        			week5    => $iniMapper->findByName("conf1_week5"),
        			week6    => $iniMapper->findByName("conf1_week6"),
        			week7    => $iniMapper->findByName("conf1_week7"),
        			user     => $this->userId,
        			imgurl   => $imgurl
        	];
        	 
        }
        
        return new TemplateResponse('hookextract', 'main', $params);  // templates/main.php
    }

    /**
     * Simply method that posts back the payload of the request
     * @NoAdminRequired
     * @NoCSRFRequired
     */
    public function xlsdwnl($formtype, $datefrom, $dateto) {
        $mapper = new EntryMapper($this->db);

        $objPHPExcel = new \PHPExcel();

        $objPHPExcel->getProperties()->setTitle("Extraction")
                ->setSubject("Extraction")
                ->setDescription("Extraction")
                ->setKeywords("Extraction");

        $data = $mapper->findByFormType($formtype, $datefrom, $dateto);

        $headers = [];
        $output = [];

        foreach ($data as $line) {
            if (!$headers[$line->getKey()]) {
                $headers[$line->getKey()] = [];
            }

            if (!$output[$line->getFormid()]) {
                $output[$line->getFormid()] = [$line->getKey() => $line->getValue()];
            } else {
                $output[$line->getFormid()][$line->getKey()] = $line->getValue();
            }
        }

        $keys = array_keys($headers);
        $objPHPExcel->setActiveSheetIndex(0);
        $objPHPExcel->getActiveSheet()->fromArray($keys, null, 'A1');
        $objPHPExcel->getActiveSheet()->getStyle('A1:AZ1')->getFont()->setBold(true);
        $objPHPExcel->getActiveSheet()->fromArray($output, null, 'A2');

        foreach (range('A', 'Z') as $column) {
            $aColumn = 'A'.$column;
            if ($objPHPExcel->getActiveSheet()->getCell($column.'1')->getValue()) {
                $objPHPExcel->getActiveSheet()->getColumnDimension($column)->setAutoSize(true);
            }
            if ($objPHPExcel->getActiveSheet()->getCell($aColumn.'1')->getValue()) {
                $objPHPExcel->getActiveSheet()->getColumnDimension($aColumn)->setAutoSize(true);
            } 
        }


        $objPHPExcel->getActiveSheet()->setTitle('Extraction');

        $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
        ob_start();
	$objWriter->save('php://output');

        $content = ob_get_clean();

        $storage = $this->app->getUserFolder();

        // check if file exists and write to it if possible
        try {
            try {
                $file = $storage->get('myfile.xls');
            } catch (\OCP\Files\NotFoundException $e) {
                $file = $storage->newFile('myfile.xls');
            }

            // the id can be accessed by $file->getId();
            $file->putContent($content);
        } catch (\OCP\Files\NotPermittedException $e) {
            // you have to create this exception by yourself ;)
            throw new StorageException('Cant write to file');
        }

        return new FileResponse('myfile.xls', 'application/xml', $content);
    }

    /**
     * Simply method that posts back the payload of the request
     * @NoAdminRequired
     */
    public function preselect($from, $to) {
        $mapper = new FormsMapper($this->db);
        $arch_mapper = new \OCA\DeductToDB\Db\entryArchiveMapper($this->db);
        
        $strout = "";
        $strout .= "<table><tr><td>";

        $data = $mapper->selectFormsbyInterval($from, $to);
        $archive = [];
        //var_dump($data);
        $data_uniq = [];
        foreach ($data as $line_u) {
            $data_uniq[] = $line_u->getType();
        }

        $data_uniq = array_unique($data_uniq);
        $strout .= "<p>From:" . $from . " To: " . $to . "</p>";
        $strout .= "<br><p><select name='presel' id='presel' multiple='yes' size='6' style='height:100px'>";
        sort($data_uniq);
        foreach ($data_uniq as $line) {
            $strout .= "<option value='" . $line . "'>" . $line . "</option>";
        }
        $strout .= "</select></p>";
        
        $archive = $arch_mapper->findByDate($from, $to);
        if(count($archive) >= 0){
        	$strout .= '<br/><p>Corresponding archive records found. Select?';
        	$strout .= '<input type="checkbox" name="archive" id="archive" /></p>';
        	//$strout .= '<br/><p><button id="select">Select</button></p>';
        }
        
        $strout .= '<br/><p><button id="select">Select</button></p>';
        $strout .= "</td><td>";
        
        $strout .= "<p>Fields control</p>";
        $strout .= "<table>";
        $strout .= "		<tr><td>";
        $strout .= "		</td>";
        $strout .= "		<td></td>";
        $strout .= "</tr>";
        $strout .= "		<tr><td>";
        $strout .= "		</td>";
        $strout .= "		<td></td>";
        $strout .= "</tr>";
        $strout .= "</table>";
        
        $strout .= "</td></tr></table>";
        return new DataResponse($strout);
    }

    /**
     * Simply method that posts back the payload of the request
     * @NoAdminRequired
     */
    public function select($formtype, $datefrom, $dateto) {
        $params = ['user' => $this->userId];
        $mapper = new EntryMapper($this->db);
        
        $in_array = split(";", $formtype);
        
        $strout = "<p>Data preview:</p>";
        
        //var_dump($data);
        $headers = [];
        $output = [];
        // 		for($i = 0; $i < count($data); $i++)
        	// 		{
        	// 			$output[$i] = [];
        	// 		}
        
        foreach($in_array as $type){

        	$data = $mapper->findByFormType($type, $datefrom, $dateto);
        
        	foreach ($data as $line) {

            	if (!$headers[$line->getKey()]) {
                	$headers[$line->getKey()] = [];
            	}

            	if (!$output[$line->getFormid()]) {
                	$output[$line->getFormid()] = [$line->getKey() => $line->getValue()];
            	} else {
                	$output[$line->getFormid()][$line->getKey()] = $line->getValue();
            	}
        	}
        }

        $strout .= '<p><table border="1">';
        foreach ($headers as $headerkey => $headerval) {
            $strout .= '<th>';
            $strout .= $headerkey;
            $strout .= '</th>';
        }
        foreach ($output as $outline) {
            $strout .= '<tr>';
            foreach ($headers as $headerkey => $headerval) {
                $strout .= '<td>';
                $strout .= $outline[$headerkey];
                $strout .= '</td>';
            }
            $strout .= '</tr>';
        }

        $strout .= '</table></p><br/>';

        $strout .= '<p><button id="exceldownl">Excel download</button></p>';
        return new DataResponse($strout);
    }

    /**
     * Simply method that posts back the payload of the request
     * @NoAdminRequired
     */
    public function doEcho($echo) {
        return new DataResponse(['echo' => $echo]);
    }
    
    /**
     * Simply method that posts back the payload of the request
     * @NoAdminRequired
     * @NoCSRFRequired
     */
    public function timers($everyday, $begin, $plushour, $week1, $week2, $week3, $week4, $week5, $week6, $week7, $begin_selection, $end_selection) {
    	
    	$iniMapper = new \OCA\DeductToDB\Db\paramsMapper($this->db);
    	if($everyday == "1"){  //  every day reurrency
    		$iniMapper->setByName("conf1_recurrency", "daily");
    		$iniMapper->setByName("conf1_begin", $begin);
    		$iniMapper->setByName("conf1_begin_selection", $begin_selection);
    		$iniMapper->setByName("conf1_end_selection", $end_selection);
    		$iniMapper->setByName("conf1_plus1h", $plushour);
    		
    	}else{
    		$iniMapper->setByName("conf1_recurrency", "weekly");
    	}
    	$params = [];
    	
    	$imgurl = \OC::$server->getURLGenerator()->imagePath('hookextract', 'image002.jpg');
    	
        $recurr = $iniMapper->findByName("conf1_recurrency");
        if($recurr){
    		$params = [
    				everyday => $recurr,
    				begin    => $iniMapper->findByName("conf1_begin"),
    				begin_selection => $iniMapper->findByName("conf1_begin_selection"),
    				end_selection => $iniMapper->findByName("conf1_end_selection"),
    				plushour => $iniMapper->findByName("conf1_plus1h"),
    				week1    => $iniMapper->findByName("conf1_week1"),
    				week2    => $iniMapper->findByName("conf1_week2"),
    				week3    => $iniMapper->findByName("conf1_week3"),
    				week4    => $iniMapper->findByName("conf1_week4"),
    				week5    => $iniMapper->findByName("conf1_week5"),
    				week6    => $iniMapper->findByName("conf1_week6"),
    				week7    => $iniMapper->findByName("conf1_week7"),
    				user     => $this->userId,
    				imgurl   => $imgurl
    		];
    	
        }
    	
    	return new TemplateResponse('hookextract', 'part.content', $params);
    	//return new DataResponse("echo");
    }
    
    /**
     * Simply method that posts back the payload of the request
     * @NoAdminRequired
     * @NoCSRFRequired
     */
    public function upload($filepath) {
        if (isset($_FILES['filepath'])) {
            if ($_FILES['filepath']['tmp_name'] && !$_FILES['filepath']['error']) {
                $inputFile = $_FILES['filepath']['tmp_name'];
                //$extension = strtoupper(pathinfo($inputFile, PATHINFO_EXTENSION));
                // if ($extension == 'XLSX' || $extension == 'XLS') {
                try {
                    $inputFileType = \PHPExcel_IOFactory::identify($inputFile);
                    $objReader = \PHPExcel_IOFactory::createReader($inputFileType);
                    $objPHPExcel = $objReader->load($inputFile);
                    //$objPHPExcel = \PHPExcel_IOFactory::load($inputFile);
                } catch (Exception $ex) {
                    echo $ex->getMessage();
                }

                $objWorksheet = $objPHPExcel->getActiveSheet();
                $highestRow = $objWorksheet->getHighestRow();
                $highestColumn = $objWorksheet->getHighestColumn();

                for ($row = 2; $row <= $highestRow; $row++) {
                    $rowData = $objWorksheet->rangeToArray('A' . $row . ':' . $highestColumn . $row, NULL, TRUE, FALSE);
                    // insert into DB
                }
                // }
            } else {
                echo "An error occured during uploading";
            }
        } else {
            echo "File hasn't been uploaded";
        }
        return new DataResponse("test");
    }



}
